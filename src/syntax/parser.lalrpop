use std::str::FromStr;
use std::sync::RwLockWriteGuard;

use codespan::{RawIndex, Span};
use itertools::rev;
use lalrpop_util::ParseError;

use crate::syntax::symbol::{Interner, Symbol};
use crate::syntax::{ast, Error};

grammar(interner: &mut RwLockWriteGuard<'_, Interner>);

extern {
    type Error = Error;
}

pub(crate) SpannedExpr = Spanned<Expr>;

Expr: ast::Expr = {
    FuncExpr => ast::Expr::Func(Box::new(<>)),
    CallExpr => ast::Expr::Call(Box::new(<>)),
    LetExpr => ast::Expr::Let(Box::new(<>)),
    RecExpr => ast::Expr::Rec(Box::new(<>)),
    IfExpr => ast::Expr::If(Box::new(<>)),
    SimpleExpr,
}

FuncExpr: ast::FuncExpr = {
    "func" <args:Spanned<Symbol>*> <arg:Spanned<Symbol>> "=>" <body:Spanned<Expr>> => {
        let mut func = ast::FuncExpr { arg, body };
        for arg in rev(args) {
            let span = Span::new(arg.span.start(), func.body.span.end());
            func = ast::FuncExpr { arg, body:
                ast::Spanned {
                    span, val: ast::Expr::Func(Box::new(func))
                }
            };
        }
        func
    }
}

CallExpr: ast::CallExpr = {
    <func:Spanned<CallFuncExpr>> <arg:Spanned<SimpleExpr>> => ast::CallExpr { <> },
}

CallFuncExpr: ast::Expr = {
    SimpleExpr,
    CallExpr => ast::Expr::Call(Box::new(<>)),
}

LetExpr: ast::LetExpr = {
    "let" <name:Spanned<Symbol>> "=" <val:Spanned<Expr>> "in" <body:Spanned<Expr>> => ast::LetExpr { <> },
}

RecExpr: ast::RecExpr = {
    "let" "rec" <name:Spanned<Symbol>> "=" <func:Spanned<FuncExpr>> "in" <body:Spanned<Expr>> => ast::RecExpr { <> },
}

IfExpr: ast::IfExpr = {
    "if" <cond:Spanned<Expr>> "then" <cons:Spanned<Expr>> "else" <alt:Spanned<Expr>> => ast::IfExpr { <> },
}

ProjExpr: ast::ProjExpr = {
    <expr:Spanned<SimpleExpr>> "." <field:Spanned<Symbol>> => ast::ProjExpr { <> },
}

MatchExpr: ast::MatchExpr = {
    "match" <expr:Spanned<Expr>> "with" "[" <cases:Comma<Spanned<MatchCase>>> "]" => ast::MatchExpr {
        expr, cases: cases.into_iter().map(|spanned| (spanned.val.0, ast::Spanned {
            val: spanned.val.1,
            span: spanned.span,
        })).collect(),
    }
}

EnumExpr: ast::EnumExpr = {
    "[" <tag:Spanned<Symbol>> <expr:(":" <Spanned<Expr>>)?> "]" => ast::EnumExpr { <> },
}

MatchCase: (Symbol, ast::MatchExprCase) = {
    <tag:Symbol> "=>" <expr:Spanned<Expr>> => (tag, ast::MatchExprCase {
        name: None, expr,
    }),
    <tag:Symbol> ":" <name:Spanned<Symbol>> "=>" <expr:Spanned<Expr>> => (tag, ast::MatchExprCase {
        name: Some(name), expr,
    }),
}

ImportExpr: ast::Expr = {
    "import" <path:String> => ast::Expr::Import(path),
}

SimpleExpr: ast::Expr = {
    "null" => ast::Expr::Null,
    "(" ")" => ast::Expr::Null,
    "true" => ast::Expr::Bool(true),
    "false" => ast::Expr::Bool(false),
    Symbol => ast::Expr::Var(<>),
    Int => ast::Expr::Int(<>),
    Float => ast::Expr::Float(<>),
    String => ast::Expr::String(<>),
    "{" <fields:Comma<Entry>> "}" => ast::Expr::Record(fields.into_iter().collect()),
    EnumExpr => ast::Expr::Enum(Box::new(<>)),
    ProjExpr => ast::Expr::Proj(Box::new(<>)),
    MatchExpr => ast::Expr::Match(Box::new(<>)),
    ImportExpr,
    "(" <Expr> ")",
}

Entry: (Symbol, ast::Spanned<ast::Expr>) = {
    <s:Symbol> ":" <e:Spanned<Expr>> => (s, e),
    <s:Spanned<Symbol>> => (s.val, ast::Spanned {
        val: ast::Expr::Var(s.val),
        span: s.span,
    }),
}

Spanned<T>: ast::Spanned<T> = {
    <l:@L> <val:T> <r:@R> => ast::Spanned {
        val, span: Span::new(l as RawIndex, r as RawIndex)
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Symbol: Symbol = {
    identifier => interner.intern(<>),
}

Int: i64 = {
    <l:@L> <i:integer> <r:@R> =>? match i64::from_str(i) {
        Ok(val) => Ok(val),
        Err(err) => Err(ParseError::User {
            error: Error::new(l as RawIndex, r as RawIndex, format!("error parsing integer: {}", err)),
        }),
    }
}

Float: f64 = {
    <l:@L> <f:float> <r:@R> =>? match f64::from_str(f) {
        Ok(val) => Ok(val),
        Err(err) => Err(ParseError::User {
            error: Error::new(l as RawIndex, r as RawIndex, format!("error parsing float: {}", err)),
        }),
    }
}

String: String = {
    <s:string> => {
        s[1..(s.len() - 1)]
            .replace("\\\"", "\"")
            .replace("\\\\", "\\")
    },
}

match {
    "func", "let", "rec", "in", "if", "then", "else", "match", "with", "import", "null", "false", "true",
    "=", ".", "(", ")", "[", "]", "{", "}", "=>", ":", ",",
} else {
    r"-?\d+" => integer,
} else {
    r"-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?" => float,
} else {
    r"[[:alnum:]_]+" => identifier,
    r##""(?:[^\\"]|(?:\\")|(?:\\\\))*""## => string,
}
